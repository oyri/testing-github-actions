name: Sende author to repo (test by do change in testingtesting repo/or merge PR there)
on:
  repository_dispatch:
    types: [update-version]
env:
  IMAGE-NAME: ${{ github.event.client_payload.image-name }}
  MANUAL-DEPLOY: ${{ github.event.client_payload.manual-deploy }}
  AUTHOR-USERNAME: ${{ github.event.client_payload.author.username }}
  AUTHOR-NAME: ${{ github.event.client_payload.author.name }}
  AUTHOR-EMAIL: ${{ github.event.client_payload.author.username }}@users.noreply.github.com
  ACTOR: ${{ github.event.client_payload.actor }}  
  PR-LABELS-UNPARSED: ${{github.event.client_payload.pr-labels}}
  PR-LABELS: ''
  
jobs:
  job1:
    runs-on: ubuntu-latest
    steps:
      - name: Parse PR labels
        if: ${{ env.PR-LABELS-UNPARSED!='' && env.PR-LABELS-UNPARSED!= '[]'}}
        run: echo "PR-LABELS=${{ join(fromJSON(env.PR-LABELS-UNPARSED), ', ') }}" >> "$GITHUB_ENV"
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Set imagetag as env variable
        run: echo "IMAGETAG=$(date +'%Y-%m-%d-%H%M')-${GITHUB_SHA::8}" >> "$GITHUB_ENV"
      - name: Set actor username and email
        if: ${{ env.AUTHOR-USERNAME=='' && env.ACTOR != '' }}
        run: echo "AUTHOR-USERNAME=${{env.ACTOR}}" >> "$GITHUB_ENV" && echo "AUTHOR-EMAIL=${{env.ACTOR}}@users.noreply.github.com" >> "$GITHUB_ENV"
      - name: Set actor name
        if: ${{ env.AUTHOR-NAME=='' && env.ACTOR != ''}}
        run: echo "AUTHOR-NAME=${{env.ACTOR}}" >> "$GITHUB_ENV"    
      - id: echo-image-name
        run: echo imagename ${{env.IMAGE-NAME}}
      - id: echo-author-obj-actor
        run: echo "${{ github.event.client_payload.author }} and ${{ github.event.client_payload.author }}"
      - id: author-print
        run: echo "jira ${{ github.event.client_payload.jira-id }} name ${{ github.event.client_payload.author.name }} email ${{ github.event.client_payload.author.email }} username ${{ github.event.client_payload.author.username }}"
      - name: checkout repo
        uses: actions/checkout@v3
      - id: update-date-file
        run: "date > datetime.txt"
      - name: create pull request
        uses: peter-evans/create-pull-request@923ad837f191474af6b1721408744feb989a4c27 # pin@v4.0.3
        with:
          commit-message: "${{ env.JIRA-ID }}: updating version of ${{ env.IMAGE-NAME }}"
          branch: ${{ env.IMAGE-NAME }}-version-update
          delete-branch: true
          labels: |
            update-version
            ${{ env.PR-LABELS }}
          branch-suffix: random
          assignees: ${{ env.AUTHOR-USERNAME }}
          author: ${{ env.AUTHOR-NAME }} <${{ env.AUTHOR-EMAIL }}>
          committer: ${{ env.AUTHOR-NAME }} <${{ env.AUTHOR-EMAIL }}>
          title: "${{ env.JIRA-ID }}: updating version of ${{ env.IMAGE-NAME}} "
          body: "Automated pull-request. Co-authored-by: ${{ env.AUTHOR-NAME }} <${{ env.AUTHOR-EMAIL }}>"
      - name: merge-updated-version
        id: automerge
        if: ${{ env.MANUAL-DEPLOY != 'true' }}
        uses: "pascalgn/automerge-action@v0.15.5"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: "update-version,!manual-deploy"
          MERGE_COMMIT_MESSAGE: "pull-request-title-and-description"
          MERGE_METHOD: "squash"
      - name: feedback
        if: ${{steps.automerge.outputs.mergeResult == 'merged'}}
        run: |
          echo "Pull request ${{ steps.automerge.outputs.pullRequestNumber }} merged!"
